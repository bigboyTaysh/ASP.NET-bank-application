@model BankApplication.Models.CreditApplication

@{
    ViewBag.Title = "Create";
}

<h2></h2>

@using (Html.BeginForm("Create", "CreditApplications", FormMethod.Post, new { enctype = "multipart/form-data" })) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal creditForm">
    <h4>Nowy wniosek o kredyt</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.CreditAmount, htmlAttributes: new { @class = "control-label col-md-2 value" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CreditAmount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CreditAmount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TotalRepayment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.TotalRepayment, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.TotalRepayment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.MonthRepayment, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.MonthRepayment, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MonthRepayment, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NumberOfMonths, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select name="NumberOfMonths" class="form-control">
                <option value="1">1</option>
                @for (int i = 2; i < 12; i += 2)
                {
                    <option value="@i">@i</option>
                }
                @for (int i = 12; i < 34; i += 4)
                {
                    <option value="@i">@i</option>
                }
                @for (int i = 36; i <= 120; i += 6)
                {
                    <option value="@i">@i</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.NumberOfMonths, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TypeID, "Typ kredytu", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select name="TypeID" class="form-control">
                @foreach (var item in (List<BankApplication.Models.CreditType>)ViewBag.Types)
                {
                    <option value="@item.ID" commission="@decimal.Round(item.Commission, 2)" rates=" @decimal.Round(item.Rates, 2)">
                        <span>
                            @item.Name
                        </span>
                        [br]
                        <span>
                            Prowizja @decimal.Round(item.Commission, 2)%
                        </span>
                        <span>
                            Oprocentowanie @decimal.Round(item.Rates, 2)%
                        </span>
                    </option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })
        </div>
    </div>

    @Html.LabelFor(model => model.ScannedDocument, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <input type="file" name="ScannedDocument" accept="image/*" />
        @Html.ValidationMessageFor(model => model.ScannedDocument, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <div class="col-md-offset-3 col-md-8" style="margin-top: 20px">
            <input type="submit" value="Wyślij" class="btn btn-default" disabled />
        </div>
    </div>
</div>
}
<script>
    function f(creditAmount, months, creditRates, commission) {
        let sum = 0.0;
        let numberOfInstallmentsPaidDuringTheYear = 12;
        creditAmount = parseFloat(creditAmount) + (creditAmount * (0.01 * commission));

        for (let i = 1; i <= months; i++) {
            sum = sum + Math.pow((1 + ((0.01 * creditRates) / numberOfInstallmentsPaidDuringTheYear)), 0 - i);
        }
        return creditAmount / sum;
    }

    $(document).ready(function () {
        $('select[name=TypeID]').select2({
            templateResult: function (item, container) {
                return $('<span>' + item.text.replace('[br]', '<br />') + '</span>');
            },
            templateSelection: function (item, container) {
                return item.text.replace('[br]', '');
            }
        });
    });

    $(".creditForm").on("keyup change", function () {
        let creditAmount = parseFloat($("input[name=CreditAmount]").val());
        let months = $("select[name=NumberOfMonths]").val();
        let type = $("select[name=TypeID]").find(':selected');
        let creditRates = type.attr("rates");
        let commission = type.attr("commission");

        if (!isNaN(creditAmount)) {
            $("input[name=TotalRepayment]").val((f(creditAmount, months, creditRates, commission).valueOf() * months).toFixed(2));
            $("input[name=MonthRepayment]").val((f(creditAmount, months, creditRates, commission).valueOf()).toFixed(2));
            $("input[type=submit]").prop('disabled', false);
        } else {
            $("input[type=submit]").prop('disabled', true);
        }
    });

</script>
